name: vcpkg-action
description: Simple action to run vcpkg and cache results
inputs:
  pkgs:
    description: "List of packages to build, separated by spaces"
    required: true
  triplet:
    description: "vcpkg triplet to use"
    required: true
  extra-args:
    description: "Extra vcpkg command line args (optional)"
    required: false
  cache-key:
    description: "Additional cache key component (optional)"
    required: false
  disable-cache:
    description: "Disable cache (useful for release builds)"
    required: false
    default: 'false'
  debug:
    description: "Enable debug output."
    required: false
    default: 'false'
  revision:
    description: "vcpkg revision to checkout."
    required: false
    default: ''
  api-token:
    description: "Optional access token to update cache contents."
    required: false
runs:
  using: "composite"
  steps:
  - name: Get latest Github release
    uses: performous/github-action-get-latest-release@v0.7.0
    id: get-latest-vcpkg-release
    with:
      repository: microsoft/vcpkg
      excludes: prerelease, draft
      token: ${{ github.token }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: Determine checkout tag
    shell: bash
    id: determine-checkout-revision
    run: |
      if [[ "${{ inputs.revision }}" != "" ]]; then
        echo "vcpkg-revision=${{ inputs.revision }}" >> $GITHUB_OUTPUT
      else
        echo "vcpkg-revision=${{ steps.get-latest-vcpkg-release.outputs.release }}" >> $GITHUB_OUTPUT
      fi
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: checkout-vcpkg
    uses: actions/checkout@v3
    with:
      path: ${{ github.workspace }}/vcpkg
      repository: microsoft/vcpkg
      ref: '${{ steps.determine-checkout-revision.outputs.vcpkg-revision }}'
      fetch-depth: 1 
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: bootstrap-vcpkg-win
    if: runner.os == 'Windows'
    working-directory: ${{ github.workspace }}\vcpkg
    run: bootstrap-vcpkg.bat
    shell: cmd
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: bootstrap-vcpkg-unix
    if: runner.os != 'Windows'
    working-directory: ${{ github.workspace }}/vcpkg
    run: ./bootstrap-vcpkg.sh
    shell: bash
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-win
    if: runner.os == 'Windows'
    working-directory: ${{ github.workspace }}\vcpkg
    shell: cmd
    run: |
      mkdir ${{ github.workspace }}\vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg.exe" install --binarysource="clear;files,${{ github.workspace }}\vcpkg_cache,readwrite" --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }} > vcpkg_dry_run.txt

      if ${{ inputs.debug }}==true "${{ github.workspace }}/vcpkg/vcpkg.exe" install --binarysource="clear;files,${{ github.workspace }}\vcpkg_cache,readwrite" --debug --debug-env --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-unix
    if: runner.os != 'Windows'
    working-directory: ${{ github.workspace }}/vcpkg
    shell: bash
    run: |
      mkdir ${{ github.workspace }}/vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg" install --binarysource="clear;files,${{ github.workspace }}/vcpkg_cache,readwrite" --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }} > vcpkg_dry_run.txt

      if [[ ${{ inputs.debug }} == "true" ]]; then
      "${{ github.workspace }}/vcpkg/vcpkg" install --binarysource="clear;files,${{ github.workspace }}/vcpkg_cache,readwrite" --debug --debug-env --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
      fi

    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: get-cached-vcpkg-archives
    if: ${{ inputs.disable-cache != 'true' }}
    id: get-cached-vcpkg-archives
    uses: Lord-Kamina/always-upload-cache/restore@refresh-cache
    with:
      path: ${{ github.workspace }}/vcpkg_cache
      key: ${{ runner.os }}-${{ inputs.triplet }}-vcpkg-${{ hashFiles('vcpkg/vcpkg_dry_run.txt') }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
      GITHUB_TOKEN: "${{ inputs.api-token }}"
  - name: build-vcpkg-win
    id: build-vcpkg-win
    if: runner.os == 'Windows'
    shell: cmd
    working-directory: ${{ github.workspace }}\vcpkg
    run: |
      IF ${{ inputs.debug }}==true ("${{ github.workspace }}/vcpkg/vcpkg.exe" install --binarysource="clear;files,${{ github.workspace }}\vcpkg_cache,readwrite" --debug --debug-env --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}) ELSE ("${{ github.workspace }}/vcpkg/vcpkg.exe" install --binarysource="clear;files,${{ github.workspace }}\vcpkg_cache,readwrite" --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }})
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: build-vcpkg-unix
    id: build-vcpkg-unix
    if: runner.os != 'Windows'
    shell: bash
    working-directory: ${{ github.workspace }}/vcpkg
    run: |
      if [[ ${{ inputs.debug }} == "true" ]]; then
      "${{ github.workspace }}/vcpkg/vcpkg" install --binarysource="clear;files,${{ github.workspace }}/vcpkg_cache,readwrite" --debug --debug-env --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
      else 
      "${{ github.workspace }}/vcpkg/vcpkg" install --binarysource="clear;files,${{ github.workspace }}/vcpkg_cache,readwrite" --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
      fi
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: save-vcpkg-archives-cache
    id: save-vcpkg-archives-cache
    if: ${{ ( inputs.disable-cache != 'true' && ( steps.build-vcpkg-unix.outcome == 'success' || steps.build-vcpkg-win.outcome == 'success' ) )}}
    uses: Lord-Kamina/always-upload-cache/save@refresh-cache
    with:
      path: ${{ github.workspace }}/vcpkg_cache
      key: ${{ runner.os }}-${{ inputs.triplet }}-vcpkg-${{ hashFiles('vcpkg/vcpkg_dry_run.txt') }}
      refresh-cache: 'true'
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
      GITHUB_TOKEN: "${{ inputs.api-token }}"
